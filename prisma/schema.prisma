// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Quote {
  id        String   @id @default(uuid())
  authors   Person[]
  key       String?
  sources   Source[]
  content   String   @map("text")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Person {
  id               String   @id @default(uuid())
  name             String
  shortName        String?
  yearBorn         String?
  yearDied         String?
  quotes           Quote[]
  texts            Text[]
  fictional        Boolean  @default(false)
  notes            String?
  bio              String?
  thingsAuthored   Thing[]  @relation("ThingAuthors")
  thingsTranslated Thing[]  @relation("ThingTranslators")
  thingsEdited     Thing[]  @relation("ThingEditors")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum TextType {
  BOOK
  ARTICLE
  SPEECH
  LETTER
  BLOG_POST
  SOCIAL_MEDIA_POST
  INTERVIEW
  ESSAY
}

model Text {
  id        String    @id @default(uuid())
  authors   Person[]
  things    Thing[]
  subtitle  String?
  title     String
  type      TextType?
  year      String?
  sources   Source[]
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Source {
  id        String     @id @default(uuid())
  citations Citation[]
  quote     Quote      @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  text      Text       @relation(fields: [textId], references: [id], onDelete: Cascade)
  primary   Boolean?
  quoteId   String
  textId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Citation {
  id        String   @id @default(uuid())
  source    Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  thing     Thing    @relation(fields: [thingId], references: [id], onDelete: Cascade)
  sourceId  String
  thingId   String
  start     String? // can be roman (e.g. in intro) or arabic numerals, or a timestamp
  end       String? // ^^
  startLine Int? // for displaying citations within an thing in order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ThingType {
  PAPERBACK
  HARDCOVER
  LEATHERBOUND
  WEBSITE
  PDF
  VIDEO_RECORDING
  AUDIO_RECORDING
}

model Thing {
  id          String     @id @default(uuid())
  publisher   Publisher? @relation(fields: [publisherId], references: [id])
  subtitle    String?
  texts       Text[]
  title       String
  type        ThingType?
  url         String?
  year        String?
  citations   Citation[]
  publisherId String?
  notes       String?
  authors     Person[]   @relation("ThingAuthors")
  translators Person[]   @relation("ThingTranslators")
  editors     Person[]   @relation("ThingEditors")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Publisher {
  id        String   @id @default(uuid())
  name      String
  location  String?
  url       String?
  notes     String?
  things    Thing[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
